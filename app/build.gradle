apply plugin: 'com.android.application'

android {
    signingConfigs {
        Android {
            def signingPropsFile = new File('../signing.properties')
            if (signingPropsFile.canRead()) {
                def props = new Properties()
                def fileInputStream = new FileInputStream(signingPropsFile)
                props.load(fileInputStream)
                fileInputStream.close()
                storeFile = file(props['storeFilePath'])
                storePassword = props['storePassword']
                keyAlias = props['keyAlias']
                keyPassword = props['keyPassword']
            }
        }
    }
    compileSdkVersion 33
    // minSdkVersion should be the lowest supported.
    //  - For app versions 1.6 and below this was 4
    //  - Raised to 7 for version 2.0 to support the appcompat support library
    //    so we could use ActionBars
    //  - Raised to ?? for version 2.2.1 to get the recyclerview (for the
    //    view to reorder collections
    //  - Raised to 14 for version 2.3.4 since appcompat's min SDK increased to that
    // targetSdkVersion should be raised to match the latest version of
    // Android and then tested (on that version) to make sure it works.
    defaultConfig {
        applicationId "com.spencerpages"
        minSdkVersion 14
        targetSdkVersion 33
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "app-${variant.flavorName}-${variant.buildType.name}-v${variant.versionName}.apk"
                }
            }
        }
        debug {
            applicationIdSuffix ".debug"
            debuggable true
        }
    }
    flavorDimensions "version"
    productFlavors {
        android {
            dimension "version"
        }
        amazon {
            dimension "version"
            applicationIdSuffix ".amazon"
        }
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
    sourceSets {
        androidTest {
            java.srcDirs += "src/sharedTest/java"
        }
        test {
            java.srcDirs += "src/sharedTest/java"
        }
    }
    lint {
        abortOnError false
    }
    namespace 'com.spencerpages'
    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.all {
            testLogging {
                events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
                exceptionFormat "full"
                showExceptions = true
                showCauses = true
                showStackTraces = true
                showStandardStreams = true
            }
        }
        unitTests.includeAndroidResources = true
    }
}

configurations {
    all {
        exclude module: 'commons-logging'
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'com.opencsv:opencsv:5.7.1'
    //debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.6'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.robolectric:robolectric:4.9'
    testImplementation 'androidx.test:core:1.5.0'
    testImplementation 'org.mockito:mockito-core:5.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test:rules:1.5.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    androidTestImplementation 'tools.fastlane:screengrab:2.1.1'
}